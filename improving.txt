Se voc√™ tiver **v√°rios produtos** e cada um tem um atributo `data-preco` diferente, voc√™ pode seguir um fluxo semelhante, mas ajustando o c√≥digo para **gerenciar m√∫ltiplos valores de pre√ßos**. Vamos imaginar que voc√™ tenha v√°rios produtos em sua p√°gina, cada um com um valor de `data-preco`. Quando o usu√°rio clica em um bot√£o, o valor do produto ser√° subtra√≠do do saldo do usu√°rio.

Aqui est√° o que voc√™ pode fazer:

### Passos principais:

1. **Recuperar todos os produtos** (e seus pre√ßos) da p√°gina.
2. **Subtrair o pre√ßo do produto selecionado** do saldo do usu√°rio.
3. **Atualizar o `localStorage`** com o novo saldo ap√≥s a compra.

### C√≥digo de exemplo para m√∫ltiplos produtos:

```html
<div id="produtos">
  <div class="produto" data-preco="100">
    <p>Produto 1</p>
    <button class="btnComprar">Comprar</button>
  </div>
  <div class="produto" data-preco="150">
    <p>Produto 2</p>
    <button class="btnComprar">Comprar</button>
  </div>
  <div class="produto" data-preco="200">
    <p>Produto 3</p>
    <button class="btnComprar">Comprar</button>
  </div>
</div>

<script>
  // Recupera os registros do localStorage, ou um array vazio se n√£o existirem registros
  let Registros = JSON.parse(localStorage.getItem("Registros")) || [];
  let ultimoRegistro = Registros.length > 0 ? Registros[Registros.length - 1] : null;

  if (ultimoRegistro) {
    alert(`Ol√° ${ultimoRegistro.nome}, o seu saldo √© de ${ultimoRegistro.valor}`);
  } else {
    alert("N√£o h√° registros.");
  }

  // Seleciona todos os bot√µes de compra
  document.querySelectorAll('.btnComprar').forEach(button => {
    button.addEventListener('click', function() {
      let produto = this.closest('.produto'); // Encontra o produto relacionado ao bot√£o clicado
      let productValue = parseFloat(produto.getAttribute('data-preco')); // Recupera o valor do produto

      if (ultimoRegistro) {
        let valorUser = parseFloat(ultimoRegistro.valor); // Garante que valorUser seja um n√∫mero

        if (!isNaN(valorUser) && !isNaN(productValue)) { // Verifica se ambos s√£o n√∫meros v√°lidos
          let total = valorUser - productValue;

          if (total >= 0) {
            alert(`Resta agora ${total} na sua conta.`);
            ultimoRegistro.valor = total; // Atualiza o saldo

            // Atualiza o array de registros com o novo saldo
            Registros[Registros.length - 1] = ultimoRegistro;
            localStorage.setItem("Registros", JSON.stringify(Registros)); // Atualiza no localStorage
          } else {
            alert("Saldo insuficiente.");
          }
        } else {
          alert("Valores inv√°lidos.");
        }
      } else {
        alert("Usu√°rio n√£o encontrado.");
      }
    });
  });
</script>
```

### Explica√ß√£o do c√≥digo:

1. **Estrutura HTML**:
   - Temos v√°rias `div` com a classe `.produto`, cada uma contendo um atributo `data-preco` que armazena o pre√ßo do produto.
   - Cada produto tem um bot√£o com a classe `.btnComprar`.

2. **Recuperando e verificando o usu√°rio**:
   - A primeira parte do c√≥digo recupera o √∫ltimo registro de saldo do `localStorage` e exibe o saldo atual do usu√°rio.
   
3. **Gerenciamento de m√∫ltiplos produtos**:
   - Para cada bot√£o de compra (com a classe `.btnComprar`), o evento `click` √© escutado.
   - Quando o bot√£o √© clicado, ele encontra o `data-preco` do produto associado e o valor do saldo do usu√°rio (`valorUser`).
   
4. **Verifica√ß√£o e atualiza√ß√£o do saldo**:
   - Verifica se o valor do saldo e o pre√ßo do produto s√£o n√∫meros v√°lidos com `isNaN()`.
   - Se o saldo for suficiente para a compra, o saldo √© subtra√≠do pelo pre√ßo do produto e o `localStorage` √© atualizado.
   - Se o saldo for insuficiente, um alerta √© mostrado ao usu√°rio.
   
5. **Atualizando o `localStorage`**:
   - Ap√≥s a compra, o saldo do usu√°rio √© atualizado e o array `Registros` √© salvo novamente no `localStorage`.

### O que este c√≥digo faz:

- **Gerencia m√∫ltiplos produtos**: Ele permite que o usu√°rio compre qualquer produto na lista, subtraindo o valor do produto selecionado do seu saldo.
- **Atualiza o `localStorage`** com o novo saldo a cada compra.
- **Exibe mensagens de erro** se o saldo for insuficiente ou se os valores n√£o forem v√°lidos.

### Poss√≠veis melhorias:

- **Exibir o pre√ßo antes de comprar**: Voc√™ pode adicionar um `alert` ou um visual na p√°gina para exibir o pre√ßo do produto selecionado antes de confirmar a compra.
- **Limitar a quantidade de compra**: Se quiser adicionar quantidade de produtos (por exemplo, o usu√°rio pode comprar v√°rios itens), voc√™ pode alterar o c√≥digo para verificar a quantidade e fazer a subtra√ß√£o com base nela.

Se voc√™ precisar de mais detalhes ou ajustes, fique √† vontade para perguntar! üòä